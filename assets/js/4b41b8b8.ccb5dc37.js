"use strict";(self.webpackChunkdocosaurus_rex=self.webpackChunkdocosaurus_rex||[]).push([[8934],{4258:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=i(5893),r=i(1151);const a={sidebar_position:5,keywords:["pdf"]},s="Zeitrennen Radsport",o={id:"woche08/8a-repetition/zeitrennen",title:"Zeitrennen Radsport",description:"Simulieren Sie mit einem Programm ein Zeitrennen aus dem Radsport:",source:"@site/docs/woche08/8a-repetition/zeitrennen.md",sourceDirName:"woche08/8a-repetition",slug:"/woche08/8a-repetition/zeitrennen",permalink:"/bbzbl-modul-319/docs/woche08/8a-repetition/zeitrennen",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-319/tree/main/docs/woche08/8a-repetition/zeitrennen.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,keywords:["pdf"]},sidebar:"tutorialSidebar",previous:{title:"Memory",permalink:"/bbzbl-modul-319/docs/woche08/8a-repetition/memory"},next:{title:"Woche 9 \ud83e\udd47",permalink:"/bbzbl-modul-319/docs/woche09/"}},d={},l=[{value:"Spielregeln",id:"spielregeln",level:2},{value:"\ud83e\uddf0 Implementierungshilfe",id:"toolbox-implementierungshilfe",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"zeitrennen-radsport",children:"Zeitrennen Radsport"}),"\n",(0,t.jsx)(n.p,{children:"Simulieren Sie mit einem Programm ein Zeitrennen aus dem Radsport:"}),"\n",(0,t.jsx)(n.h2,{id:"spielregeln",children:"Spielregeln"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"In einer definierten Startaufstellung f\xe4hrt ein Radrennfahrer nach dem anderen\ndas Rennen und erreicht dabei eine Zeit zwischen 30 Minuten und einer Stunde\n(1800 \u2013 3600 Sekunden)."}),"\n",(0,t.jsx)(n.li,{children:"Direkt nach der Zieleinfahrt erscheint der Fahrer mit der aktuell gefahrenen\nZeit auf der Konsole."}),"\n",(0,t.jsx)(n.li,{children:"Nachdem alle Fahrer das Rennen beendet haben, wird eine Rangliste mit den\nerreichten Zeiten ausgegeben."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Beispiel einer Ausgabe des Programms:"',children:"Racer Van Vleuten finished: 3167\nRacer Van Der Breggen finished: 2753\nRacer Vos finished: 2231\nRacer Spratt finished: 1975\nRacer Moolman-Pasio finished: 2560\nRacer Pieters finished: 3025\nRacer Rivera finished: 2003\nRacer Van Djik finished: 2093\nRacer Niewiadoma finished: 2912\nRacer Hosking finished: 1950\n*********** Rankings *************\n1: Hosking: 1950\n2: Spratt: 1975\n3: Rivera: 2003\n4: Van Djik: 2093\n5: Vos: 2231\n6: Moolman-Pasio: 2560\n7: Van Der Breggen: 2753\n8: Niewiadoma: 2912\n9: Pieters: 3025\n10: Van Vleuten: 3167\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"toolbox-implementierungshilfe",children:["\ud83e\uddf0"," Implementierungshilfe"]}),"\n",(0,t.jsx)(n.p,{children:"Folgende Hinweise helfen Ihnen bei der Implementierung:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Definieren Sie die Startaufstellung mit allen Fahrern in einem Array."}),"\n",(0,t.jsx)(n.li,{children:"F\xfcr die Rangliste ben\xf6tigen sie entweder zwei Arrays (einen f\xfcr die Namen,\neinen zweiten f\xfcr die gefahrene Zeit) ODER falls Sie sich mit\nzweidimensionalen Arrays auskennen, definieren Sie einen zweidimensionalen\nArray f\xfcr die Zeit sowie den Namen eines Rennfahrers."}),"\n",(0,t.jsx)(n.li,{children:"F\xfcr jeden Fahrer in der definierten Startreihenfolge berechnen Sie die\nRennzeit, welche zwischen 1800 und 3600 Sekunden liegen soll und geben diese\nauf die Konsole aus."}),"\n",(0,t.jsx)(n.li,{children:"Nachdem die Zeit f\xfcr einen Fahrer berechnet wurde, sortieren Sie die Zeit\nsowie den Fahrer in die Arrays f\xfcr die Rangliste ein. Dieses Einf\xfcgen an der\nkorrekten Position in den Arrays lagern Sie in eine eigene Methode aus, welche\nSie aufrufen, nachdem die Zeit berechnet wurde. Die Methode nennen Sie insert.\nBedenken Sie, dass alle Fahrer, die langsamer gefahren sind wie der aktuelle\nFahrer, im Array eine Position nach hinten geschoben werden m\xfcssen. Achten Sie\ndarauf, dass Sie keine Werte \xfcberschreiben!"}),"\n",(0,t.jsxs)(n.li,{children:["Nachdem alle Fahrer das Rennen beendet haben und an der korrekten Stelle\neinsortiert wurden, geben Sie die Rangliste auf die Konsole aus. Dies kann\nebenfalls in eine Methode namens ",(0,t.jsx)(n.code,{children:"printRanking"})," ausgelagert werden."]}),"\n"]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Musterl\xf6sung:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="BikeTimeTrial.java"',children:'public class BikeTimeTrial {\n\n\tpublic static void main(String[] args) {\n\n\t\tString[] racerStart = { "Van Vleuten", "Van Der Breggen", "Vos", "Spratt", "Moolman-Pasio", "Pieters", "Rivera",\n\t\t\t\t"Van Djik", "Niewiadoma", "Hosking"};\n\n\t\t//sorted Arrays\n\t\t//rankingNames = names of racer\n\t\t//rankingTimes = corresponding times\n\t\t//Index 0 of rankingNames = racer with time in rankingTimes on Index 0\n\t\tString[] rankingNames = new String[10];\n\t\tint[] rankingTimes = new int[10];\n\t\t//(better implementation would be to use a two-dimensional array)\n\n\t\tfor (int i = 0; i < racerStart.length; i++) {\n\t\t\t//generate random time from 1800-3600\n\t\t\tint secs = (int) (Math.random() * 1801) + 1800;\n\n\t\t\tSystem.out.println("Racer " + racerStart[i] + " finished: " + secs);\n\n\t\t\t//add the racer to the correct rank\n\t\t\tinsert(racerStart[i], secs, rankingNames, rankingTimes);\n\t\t}\n\n\t\t//print final rankings\n\t\tprintRanking(rankingNames, rankingTimes);\n\t}\n\n\tprivate static void insert(String name, int time, String[] names, int[] times) {\n\t\tint i = 0;\n\t\tfor (i = 0; i < times.length - 1; i++) {\n\t\t\tif (times[i] == 0 || times[i] > time) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int k = times.length - 2; k >= i; k--) {\n\t\t\ttimes[k + 1] = times[k];\n\t\t\tnames[k + 1] = names[k];\n\t\t}\n\t\ttimes[i] = time;\n\t\tnames[i] = name;\n\n\t}\n\n\tprivate static void printRanking(String[] rankingNames, int[] rankingTimes) {\n\t\tSystem.out.println("*********** Rankings *************");\n\t\tfor (int i = 0; i < rankingNames.length; i++) {\n\t\t\tSystem.out.println(i + 1 + ": " + rankingNames[i] + ": " + rankingTimes[i]);\n\t\t}\n\t}\n}\n'})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>s});var t=i(7294);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);