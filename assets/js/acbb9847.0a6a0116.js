"use strict";(self.webpackChunkdocosaurus_rex=self.webpackChunkdocosaurus_rex||[]).push([[4901],{8649:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var i=r(5893),s=r(1151);const t={keywords:["pdf"]},d="\u2797 Operatoren und Rechnen",l={id:"woche02/operatoren",title:"\u2797 Operatoren und Rechnen",description:"Open in Browser |",source:"@site/docs/woche02/operatoren.md",sourceDirName:"woche02",slug:"/woche02/operatoren",permalink:"/bbzbl-modul-319/docs/woche02/operatoren",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-319/tree/main/docs/woche02/operatoren.md",tags:[],version:"current",frontMatter:{keywords:["pdf"]},sidebar:"tutorialSidebar",previous:{title:"Der Datentyp String",permalink:"/bbzbl-modul-319/docs/woche02/2b-datentypen/string"},next:{title:"Woche 3",permalink:"/bbzbl-modul-319/docs/woche03/"}},a={},c=[{value:"Zuweisungsoperator <code>=</code>",id:"zuweisungsoperator-",level:2},{value:"Arithmetische Operatoren <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>",id:"arithmetische-operatoren------",level:2},{value:"\ud83d\udd8a A1: Noten berechnen",id:"pen-a1-noten-berechnen",level:2},{value:"Verk\xfcrzte arithmetische Operation mit sich selbst <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>",id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",level:2},{value:"Un\xe4re (einstellige) Operatoren <code>++</code>, <code>--</code>",id:"un\xe4re-einstellige-operatoren----",level:2},{value:"Vergleichsoperatoren",id:"vergleichsoperatoren",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"-operatoren-und-rechnen",children:"\u2797 Operatoren und Rechnen"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.a,{href:"pathname:///slides/operatoren",children:["\ud83d\udcbb"," Open in Browser"]})," |\n",(0,i.jsxs)(n.a,{href:"pathname:///slides/operatoren.pdf",children:["\ud83d\udcbe"," download PDF"]})]}),"\n",(0,i.jsx)("iframe",{src:"/bbzbl-modul-319/slides/operatoren",width:"100%",height:"400px"}),"\n",(0,i.jsxs)(n.h2,{id:"zuweisungsoperator-",children:["Zuweisungsoperator ",(0,i.jsx)(n.code,{children:"="})]}),"\n",(0,i.jsxs)(n.p,{children:["Der elementarste Operator ist der Zuweisungsoperator ",(0,i.jsx)(n.code,{children:"="}),". Mit diesem wir einer Variable einen Wert zugewiesen."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Die Variable steht immer links, der zuzuweisende Wert immer rechts."}),"\n",(0,i.jsx)(n.li,{children:"Der zuzuweisende Wert kann sich wiederum in einer Variable oder Methode befinden."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"   int sinnDesLebens = 42;\n   int number        = sinnDesLebens;\n//                   ^ Zuweisungsoperator\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"arithmetische-operatoren------",children:["Arithmetische Operatoren ",(0,i.jsx)(n.code,{children:"+"}),", ",(0,i.jsx)(n.code,{children:"-"}),", ",(0,i.jsx)(n.code,{children:"/"}),", ",(0,i.jsx)(n.code,{children:"*"}),", ",(0,i.jsx)(n.code,{children:"%"})]}),"\n",(0,i.jsxs)(n.p,{children:["Arithmetische Operatoren kennt Ihr bereits von der Mathematik. Damit lassen sich\ndie g\xe4ngigen Mathematischen Operationen durchf\xfchren. Neu ist einzig der Rest\nOperator ",(0,i.jsx)(n.code,{children:"%"}),". Dieser dividiert eine Zahl und gibt den Rest zur\xfcck."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="+ - / * % Arithmetische Operatoren"',children:"int result;\nint number = 9;\nint anotherNumber = 3;\n\nresult = number + anotherNumber; // Addition\nresult = number - anotherNumber; // Subtraktion\nresult = number / anotherNumber; // Division\nresult = number * anotherNumber; // Multiplikation\nresult = number % anotherNumber; // Rest der Division\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.mdxAdmonitionTitle,{children:["Gerade/Ungerade berechnen mit ",(0,i.jsx)(n.code,{children:"%"})]}),(0,i.jsxs)(n.p,{children:["Der Rest-Operator ",(0,i.jsx)(n.code,{children:"%"})," gibt bei einer division immer den Rest zur\xfcck. Wenn man\nnun eine Division durch 2 durchf\xfchrt l\xe4sst sich herausfinden ob eine Zahl gerade\noder ungerade ist."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"9 % 2  // ergibt 4 * 2 Rest 1 also ungerade\n10 % 2 // ergibt 5 * 2 Rest 0 also gerade\n\npublic boolean even(int number) {\n    return number % 2 == 0;\n}\n"})})]}),"\n",(0,i.jsxs)(n.h2,{id:"pen-a1-noten-berechnen",children:["\ud83d\udd8a"," A1: Noten berechnen"]}),"\n",(0,i.jsx)(n.p,{children:"Erstellen Sie ein Programm, welches vom Benutzer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["drei Semesternoten einliest (",(0,i.jsx)(n.code,{children:"StdInput.read..."}),")"]}),"\n",(0,i.jsx)(n.li,{children:"den Durchschnitt berechnet"}),"\n",(0,i.jsx)(n.li,{children:"sich dabei an ein strenges Notensystem h\xe4lt, dass nur ganze Noten zul\xe4sst und\nimmer abrundet"}),"\n",(0,i.jsx)(n.li,{children:"den Durchschnitt ausgibt"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Anhand dieser \xdcbung erkennen Sie, dass man mit Variablen und Zahlen ganz\nnormal rechnen kann."}),"\n",(0,i.jsxs)(n.li,{children:["Auch sollte nun das ",(0,i.jsx)(n.strong,{children:"EVA-Prinzip"})," klar werden"]}),"\n"]})}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Musterl\xf6sung"}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Wo ist die Methode ",(0,i.jsx)(n.code,{children:"main"}),"?"]})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Die Klasse mit der ",(0,i.jsx)(n.code,{children:"main"})," Methode m\xfcsst Ihr selber erstellen."]}),"\n",(0,i.jsxs)(n.li,{children:["der ",(0,i.jsx)(n.code,{children:"import"})," geh\xf6rt ganz oben ins File."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"..."})," kann man l\xf6schen ;)"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Musterl\xf6sung ohne main"',children:'import mytools.StdInput;\n\n...\n\n// deklarieren\ndouble grade1;\ndouble grade2;\ndouble grade3;\ndouble result;\n\n// E - Einlesen\nSystem.out.println("Welcome to the average calculator");\nSystem.out.println("Please enter the first grade");\ngrade1 = StdInput.readDouble();\nSystem.out.println("Please enter the second grade");\ngrade2 = StdInput.readDouble();\nSystem.out.println("Please enter the third grade");\ngrade3 = StdInput.readDouble();\n\n// V - Verarbeiten\nresult = (grade1 + grade2 + grade3) / 3;\n\n// A - Ausgeben\nSystem.out.println("The average grade is: " + result);\n'})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.admonition,{title:"Themen ab hier sind erst in sp\xe4teren Wochen relevant und werden bei bedarf referenziert",type:"warning"}),"\n",(0,i.jsxs)(n.h2,{id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",children:["Verk\xfcrzte arithmetische Operation mit sich selbst ",(0,i.jsx)(n.code,{children:"+="}),", ",(0,i.jsx)(n.code,{children:"-="}),", ",(0,i.jsx)(n.code,{children:"*="}),", ",(0,i.jsx)(n.code,{children:"/="})]}),"\n",(0,i.jsxs)(n.p,{children:["Oft m\xf6chte man den Wert einer Variablen direkt ver\xe4ndern. Das Resultat also\nnicht in eine neue Variable, sonder in sich selber speichern. Gegeben ist z.B.\ndie Variable ",(0,i.jsx)(n.code,{children:"number"})," vom Typ ",(0,i.jsx)(n.code,{children:"int"})," mit dem Initialwert ",(0,i.jsx)(n.code,{children:"3"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int number = 3;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["M\xf6chte man dieser Variable ",(0,i.jsx)(n.code,{children:"4"})," hinzuaddieren geht das folgendermassen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"number = number + 4; // Addition und Zuweisung zu sich selbst\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Da dies sehr oft vorkommt ist in allen g\xe4ngigen Programmiersprachen daf\xfcr ein\nkombinierten Operator vorgesehen. Es wird dem Zuweisungsoperator den\narithmetische Operator ",(0,i.jsx)(n.strong,{children:"vorangestellt"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"number += 4; // Verk\xfcrzte Addition und Zuweisung zu sich selbst\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Aus ",(0,i.jsx)(n.code,{children:"number = number + 4;"})," wird somit ",(0,i.jsx)(n.code,{children:"number += 4;"})," und erspart uns die\nDopplung der Variable. Dies geht nat\xfcrlich auch f\xfcr alle anderen arithmetischen\nOperatoren."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"number -= 7; // Subtraktion und Zuweisung zu sich selbst\nnumber *= 9; // Multiplikation und Zuweisung zu sich selbst\nnumber /= 2; // Division und Zuweisung zu sich selbst\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"un\xe4re-einstellige-operatoren----",children:["Un\xe4re (einstellige) Operatoren ",(0,i.jsx)(n.code,{children:"++"}),", ",(0,i.jsx)(n.code,{children:"--"})]}),"\n",(0,i.jsxs)(n.p,{children:["Noch h\xe4ufiger als die verk\xfcrzte arithmetische Operation mit sich selbst wird im\nProgrammieren schrittweise hoch und runtergez\xe4hlt ",(0,i.jsx)(n.strong,{children:"was auch Iteration genannt\nwird"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"M\xf6chte man also von 0 - 3 hochz\xe4hlen geht dies so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int number = 0;\nnumber += 1;\nnumber += 1;\nnumber += 1;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Der Un\xe4re Operator ",(0,i.jsx)(n.code,{children:"++"})," z\xe4hlt der links vorangestellten Variable eines\nnummerischen Typ eine 1 hinzu. Der obere Code ist somit identisch zu diesem:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int number = 0;\nnumber++;\nnumber++;\nnumber++;\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Un\xe4r => einstellig",type:"info",children:(0,i.jsxs)(n.p,{children:["Un\xe4r bedeutet einstellig, es braucht daher ",(0,i.jsx)(n.strong,{children:"nur der linke"})," und nicht auch\neinen rechten Teil beim Operator."]})}),"\n",(0,i.jsx)(n.admonition,{title:"Funfact",type:"note",children:(0,i.jsx)(n.p,{children:"C++ erweitert die Programmiersprache C. Um diese Verwandtschaft ein bisschen\nNERDisch Auszudr\xfccken wurde das Wortspiel C++ gew\xe4hlt. C++ ist eine weitere\nIteration von C."})}),"\n",(0,i.jsx)(n.h2,{id:"vergleichsoperatoren",children:"Vergleichsoperatoren"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"=="}),", ",(0,i.jsx)(n.code,{children:"!="}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:"<="}),", ",(0,i.jsx)(n.code,{children:">="})," und die Negation ",(0,i.jsx)(n.code,{children:"!"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Vergleichsoperatoren ergeben immer einen ",(0,i.jsx)(n.strong,{children:"boolean (true/false)"}),". Sie werden in\nKontrollstrukturen als Bedingungen verwendet."]}),"\n",(0,i.jsxs)("div",{className:"grid three",children:[(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="== Gleichheit"',children:"true  == true; // true\n1     == 1     // true\n\nfalse == true; // false\n1     == 2     // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="!= Ungleichheit"',children:"false != true; // true\n1     != 2     // true\n\ntrue  != true; // false\n1     != 1     // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="< Kleiner als"',children:"1 < 2 // true\n\n2 < 1 // false\n1 < 1 // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="> Gr\xf6sser als"',children:"2 > 1 // true\n\n1 > 2 // false\n2 > 2 // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title=">=Gr\xf6sser gleich"',children:"2 >= 1 // true\n2 >= 2 // true\n\n1 >= 2 // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="<= Kleiner gleich"',children:"1 <= 2 // true\n1 <= 1 // true\n\n2 <= 1 // false\n"})})}),(0,i.jsx)("div",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="! Negation"',children:"!false // true\n!(1 == 2) // true\n\n!true // false\n!(1 == 1) // false\n"})})})]}),"\n",(0,i.jsx)(n.admonition,{title:"Strings vergleichen",type:"caution",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String"})," Variablen ",(0,i.jsxs)(n.strong,{children:["immer mit ",(0,i.jsx)(n.code,{children:".equals()"})]})," vergleichen, nie mit ",(0,i.jsx)(n.code,{children:"=="})]}),"\n",(0,i.jsxs)(n.li,{children:["Auch ist es gute Praxis der ",(0,i.jsx)(n.strong,{children:"bekannte Wert mit dem unbekannten zu\nvergleichen"})," und nicht anders rum:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705"," ",(0,i.jsx)(n.code,{children:'"auto".equals(vehicle);'})]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c"," ",(0,i.jsx)(n.code,{children:'vehicle.equals("auto");'})," ergibt ein NullPointer wenn die ",(0,i.jsx)(n.code,{children:"vehicle"})," den\nWert ",(0,i.jsx)(n.code,{children:"null"})," besitzt."]}),"\n"]}),"\n"]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>d});var i=r(7294);const s={},t=i.createContext(s);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);