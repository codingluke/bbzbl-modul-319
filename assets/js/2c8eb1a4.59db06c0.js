"use strict";(self.webpackChunkdocosaurus_rex=self.webpackChunkdocosaurus_rex||[]).push([[4075],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=p(t),k=i,h=s["".concat(o,".").concat(k)]||s[k]||u[k]||r;return t?a.createElement(h,l(l({ref:n},m),{},{components:t})):a.createElement(h,l({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=k;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d[s]="string"==typeof e?e:i,l[1]=d;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7727:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={keywords:["pdf"]},l="2b - Variablen & Datentypen",d={unversionedId:"2b-datentypen/index",id:"2b-datentypen/index",title:"2b - Variablen & Datentypen",description:"Wenn Programme Daten bearbeiten, so sind diese in Variablen (\xe4nderbar) und",source:"@site/docs/2b-datentypen/index.md",sourceDirName:"2b-datentypen",slug:"/2b-datentypen/",permalink:"/bbzbl-modul-319/docs/2b-datentypen/",draft:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-319/tree/main/docs/2b-datentypen/index.md",tags:[],version:"current",frontMatter:{keywords:["pdf"]},sidebar:"tutorialSidebar",previous:{title:"Zusatz - Scanner",permalink:"/bbzbl-modul-319/docs/2a-eva/aufgabe-scanner"},next:{title:"\ud83d\udcdd Datetypen bestimmen",permalink:"/bbzbl-modul-319/docs/2b-datentypen/aufgabe1-datentypen-bestimmen"}},o={},p=[{value:"\ud83c\udfaf Ziele",id:"-ziele",level:2},{value:"\ud83e\uddd1\u200d\ud83c\udfeb Pr\xe4sentation",id:"-pr\xe4sentation",level:2},{value:"Deklaration und Initialisierung von Variablen",id:"deklaration-und-initialisierung-von-variablen",level:2},{value:"Deklaration von Konstanten",id:"deklaration-von-konstanten",level:2},{value:"<em>Primitive</em> Datentypen",id:"primitive-datentypen",level:2},{value:"Initialisierung",id:"initialisierung",level:3},{value:"<em>H\xf6here</em> Datentypen",id:"h\xf6here-datentypen",level:2},{value:"Der Datentyp <code>String</code>",id:"der-datentyp-string",level:2},{value:"Strings initialisieren",id:"strings-initialisieren",level:3},{value:"Strings zusammensetzen",id:"strings-zusammensetzen",level:3},{value:"Strings mit Zahlen zusammensetzen",id:"strings-mit-zahlen-zusammensetzen",level:3},{value:"Rechnen und Operatoren",id:"rechnen-und-operatoren",level:2},{value:"Arithmetische <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>",id:"arithmetische------",level:3},{value:"Verk\xfcrzte arithmetische Operation mit sich selbst <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>",id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",level:3},{value:"Un\xe4re (einstellige) Operatoren <code>++</code>, <code>--</code>",id:"un\xe4re-einstellige-operatoren----",level:3},{value:"Vergleichsoperatoren <code>==</code>, <code>!=</code>, <code>!</code>",id:"vergleichsoperatoren---",level:3},{value:"\ud83d\udcdd Aufgaben",id:"-aufgaben",level:2},{value:"\ud83d\udcfa Erkl\xe4rvideos von Studyflix",id:"-erkl\xe4rvideos-von-studyflix",level:2}],m=(s="DocCardList",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var s;const u={toc:p},k="wrapper";function h(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2b---variablen--datentypen"},"2b - Variablen & Datentypen"),(0,i.kt)("p",null,"Wenn Programme Daten bearbeiten, so sind diese in ",(0,i.kt)("strong",{parentName:"p"},"Variablen (\xe4nderbar)")," und\n",(0,i.kt)("strong",{parentName:"p"},"Konstanten (nicht \xe4nderbar)")," gespeichert. Die Variablen und Konstanten\nbesitzen einen Namen sowie einen f\xfcr die zu speichernden Daten passenden\n",(0,i.kt)("strong",{parentName:"p"},"Datentyp"),"."),(0,i.kt)("h2",{id:"-ziele"},"\ud83c\udfaf Ziele"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sie kennen die primitiven Datentypen und den h\xf6heren Datentyp String"),(0,i.kt)("li",{parentName:"ul"},"Sie k\xf6nnen diese als Variablen in Programmen nutzen.")),(0,i.kt)("h2",{id:"-pr\xe4sentation"},"\ud83e\uddd1\u200d\ud83c\udfeb Pr\xe4sentation"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///slides/variablen-datentypen"},"\ud83d\udcbb Open in Browser")," |\n",(0,i.kt)("a",{parentName:"p",href:"pathname:///slides/variablen-datentypen.pdf"},"\ud83d\udcbe download PDF")),(0,i.kt)("iframe",{src:"/bbzbl-modul-319/slides/variablen-datentypen",width:"100%",height:"400px"}),(0,i.kt)("h2",{id:"deklaration-und-initialisierung-von-variablen"},"Deklaration und Initialisierung von Variablen"),(0,i.kt)("p",null,"Das generelle Muster ",(0,i.kt)("em",{parentName:"p"},"(die Syntax)"),", um eine Variable zu deklarieren ",(0,i.kt)("em",{parentName:"p"},"(dem\nProgramm bekannt machen)"),', hat zwei Varianten. Die Variable kann "nur"\ndeklariert oder aber sogleich mit einem entsprechenden Wert initialisiert\nwerden.'),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"bei der Ersten Variante wird die Variable durch Angabe des ",(0,i.kt)("strong",{parentName:"p"},"Datentyps\ngefolgt vom Variablennamen"),", ",(0,i.kt)("u",null,"deklariert")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"char favoriteSign; // Variante 1 Deklaration: Variable ohne Wert\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"die Zweiten Variante ",(0,i.kt)("strong",{parentName:"p"},"erg\xe4nzt die Erste Variante")," mit einem Wert welcher\ndurch den ",(0,i.kt)("strong",{parentName:"p"},"Zuweisungsoperator")," ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," zugewiesen wird. Damit wird die Variable"),(0,i.kt)("u",null,"deklariert und direkt initialisiert"),".",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"char favoriteSign = 'b'; // Variante 2 Deklaration + Initialisierung:\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Wir verwenden in den Beispielen der Datentyp ",(0,i.kt)("inlineCode",{parentName:"p"},"char"),", das Muster ist jedoch f\xfcr\nalle Datentypen gleich. Die Ausnahme ist der Wert, der pro Datentyp anders ist.")),(0,i.kt)("h2",{id:"deklaration-von-konstanten"},"Deklaration von Konstanten"),(0,i.kt)("p",null,"Sollen Variablen ",(0,i.kt)("strong",{parentName:"p"},"nicht \xe4nderbar")," sein, dann werden diese als Konstanten\nbezeichnet, was durch das Schl\xfcsselwort ",(0,i.kt)("inlineCode",{parentName:"p"},"final")," erfolgt. Der Variablenname wird\ngem\xe4ss Konvention in ",(0,i.kt)("strong",{parentName:"p"},"GROSSBUCHSTABEN")," geschrieben."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"   final float MWST = 7.7;\n//             ^^^^ GROSSBUCHSTABEN als Konvention f\xfcr Konstante\n// ^^^^^ final definiert eine Konstante\n")),(0,i.kt)("h2",{id:"primitive-datentypen"},(0,i.kt)("em",{parentName:"h2"},"Primitive")," Datentypen"),(0,i.kt)("p",null,"In Java gibt es eine beachtliche Anzahl an Datentypen gem\xe4ss folgender Tabelle.\nVorerst nutzen wir die ",(0,i.kt)("em",{parentName:"p"},"primitiven")," Datentypen. Diese sind erkennbar, indem der\n",(0,i.kt)("strong",{parentName:"p"},"Datentyp kleingeschrieben")," ist."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,i.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,i.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,i.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"1 bit"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," ",(0,i.kt)("em",{parentName:"td"},"(wahr)")," oder ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," ",(0,i.kt)("em",{parentName:"td"},"(falsch)")," Werte"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"byte"),(0,i.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,i.kt)("inlineCode",{parentName:"td"},"-128")," bis ",(0,i.kt)("inlineCode",{parentName:"td"},"127")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"short"),(0,i.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,i.kt)("inlineCode",{parentName:"td"},"-32'768")," bis ",(0,i.kt)("inlineCode",{parentName:"td"},"32'767")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"char"),(0,i.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ein einzelnes Zeichen oder ",(0,i.kt)("a",{parentName:"td",href:"https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange"},"ASCII")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"''"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen ",(0,i.kt)("inlineCode",{parentName:"td"},"-2'147'483'648")," bis ",(0,i.kt)("inlineCode",{parentName:"td"},"2'147'483'647")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"float"),(0,i.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,i.kt)("inlineCode",{parentName:"td"},"6")," bis ",(0,i.kt)("inlineCode",{parentName:"td"},"7")," Dezimalstellen"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"f"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"long"),(0,i.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,i.kt)("inlineCode",{parentName:"td"},"-9'223'372'036'854'775'808l")," bis ",(0,i.kt)("inlineCode",{parentName:"td"},"9'223'372'036'854'775'807l")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"l"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"double"),(0,i.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,i.kt)("inlineCode",{parentName:"td"},"15")," Dezimalstellen"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"d"))))),(0,i.kt)("h3",{id:"initialisierung"},"Initialisierung"),(0,i.kt)("p",null,"Beispiele, wie Variablen initialisiert werden k\xf6nnen. Die Leerzeichen dienen nur\nder \xdcbersichtlichkeit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung von Variablen"',title:'"Deklarierung',von:!0,'Variablen"':!0},"// Datentyp     Variablenname  Semikolon\n   int          number         ;\n   char         sign           ;\n   ...\n")),(0,i.kt)("p",null,"Die Initialisierung der Werte verwendet spezifische Zeichen f\xfcr die\nverschiedenen Datentypen. So endet ein ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),"-Wert immer mit ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," oder ",(0,i.kt)("inlineCode",{parentName:"p"},"long"),"\nmit ",(0,i.kt)("inlineCode",{parentName:"p"},"l"),'. Die Spezifikas pro Datentyp finden Sie in der Tabelle oberhalb unter\n"Spezifika".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung & Initialisierung von Variablen"',title:'"Deklarierung',"&":!0,Initialisierung:!0,von:!0,'Variablen"':!0},"\n// Datentyp     Variablenname  Zuweiseoperator   Wert  Semikolon\n   int          number         =                 5     ;\n   char         sign           =                 'c'   ;\n   //                                            ^ ^  spezifisch f\xfcr char sind ('')\n   long         longNumber     =                 123l  ;\n   //                                               ^ spezifisch f\xfcr long (l)\n   ...\n")),(0,i.kt)("admonition",{title:"Speichergr\xf6sse",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Fr\xfcher hatte man wenig Speicher zur Verf\xfcgung und hat immer abgew\xe4gt, welchen\nDatentyp verwendet werden soll. Heute nimmt man f\xfcr gew\xf6hnlich einfach den\nGr\xf6ssten."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Dies verkleinert die Liste auf folgende vier: ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," und\n",(0,i.kt)("inlineCode",{parentName:"li"},"char"),"."),(0,i.kt)("li",{parentName:"ul"},"F\xfcr den Test m\xfcsst ihr trotzdem alle kennen \ud83d\ude0b"))),(0,i.kt)("h2",{id:"h\xf6here-datentypen"},(0,i.kt)("em",{parentName:"h2"},"H\xf6here")," Datentypen"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"H\xf6here")," Datentypen bauen auf den ",(0,i.kt)("em",{parentName:"p"},"primitiven")," Datentypen auf. Es handelt sich\nbei diesen auch um Objekte."),(0,i.kt)("admonition",{title:"Abgrenzung",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Was genau Objekte sind m\xfcsst Ihr noch nicht verstehen."),(0,i.kt)("li",{parentName:"ul"},"Ihr solltet in dem Modul den Datentyp ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," anwenden k\xf6nnen."))),(0,i.kt)("h2",{id:"der-datentyp-string"},"Der Datentyp ",(0,i.kt)("inlineCode",{parentName:"h2"},"String")),(0,i.kt)("p",null,"Der Datentyp ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," ",(0,i.kt)("strong",{parentName:"p"},"dient zur Speicherung von Zeichenfolgen"),", also\nallgemeiner Text. Der Text muss immer zwischen zwei ",(0,i.kt)("strong",{parentName:"p"},'"doppelten\nAnf\xfchrungszeichen"')," gestellt werden."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,i.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,i.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,i.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"2 byte pro Zeichen"),(0,i.kt)("td",{parentName:"tr",align:null},"Speichert beliebigen Text"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'""'))))),(0,i.kt)("h3",{id:"strings-initialisieren"},"Strings initialisieren"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Datentyp     Variablenname  Zuweiseoperator   Wert   Semikolon\n   String       zeichenFolge   =                 "abc"  ;\n//                                               ^   ^\n//                                   "doppelten Anf\xfchrungszeichen"\n')),(0,i.kt)("h3",{id:"strings-zusammensetzen"},"Strings zusammensetzen"),(0,i.kt)("p",null,"Mehrere Variablen vom Datentyp ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," k\xf6nnen durch ein Plus-Zeichen ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),"\nzusammengesetzt werden. Dabei sollte man darauf achten, dass der erste Text mit\neinem Leerzeichen enden soll. Wieso, sieht ihr im Beispiel:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Mit + Strings zusammensetzen"',title:'"Mit',"+":!0,Strings:!0,'zusammensetzen"':!0},'String name = "Mr Robot";\nSystem.out.println("Your name is " + name);\n//                              ^ Leerzeichen!\n//                  Your name is Mr Robot\n\nSystem.out.println("Your name is" + name);\n//                  Your name isMr Robot\n')),(0,i.kt)("admonition",{title:"H\xf6here Datentypen sind Grossgeschrieben",type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"String")," ist Gross geschrieben, da es sich um einen ",(0,i.kt)("em",{parentName:"li"},"h\xf6heren")," Datentyp\nhandelt."),(0,i.kt)("li",{parentName:"ul"},"Ein ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," baut auf dem ",(0,i.kt)("em",{parentName:"li"},"primitiven")," Datentyp ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," auf ",(0,i.kt)("em",{parentName:"li"},"(\ud83d\udca1 daher\nh\xf6her)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Evt. Hilft die Analogie von "Atome (primitiv)" zu "Molek\xfcle (h\xf6her)".'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"H\xf6here")," Datentypen sind auch Objekte.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Was Objekte genau sind, erfahrt ihr im Folgemodul 404 und ist noch nicht\nrelevant!"))))),(0,i.kt)("h3",{id:"strings-mit-zahlen-zusammensetzen"},"Strings mit Zahlen zusammensetzen"),(0,i.kt)("p",null,"Strings k\xf6nnen auch mit allen ",(0,i.kt)("em",{parentName:"p"},"primitiven")," Datentypen, also auch mit numerischen\nWerten, durch das Plus-Zeichen ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," zu einer Zeichenfolge kombiniert werden. Der\n",(0,i.kt)("em",{parentName:"p"},"primitive")," Datentyp wird dadurch automatisch zu einem String!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="String mit Zahlen kombinieren"',title:'"String',mit:!0,Zahlen:!0,'kombinieren"':!0},'System.out.println("Ihre Geschwindigkeit lautet " + 21);\n//                  Ihre Geschwindigkeit lautet 21\n')),(0,i.kt)("admonition",{title:"Eine Zahl in einen String umwandeln",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Werden Zahlen mit einem ",(0,i.kt)("strong",{parentName:"p"},'leeren String ""'),' konkatiniert, wird die Zahl alleine\nin einen String umgewandelt. Dies ist ein g\xe4ngiger Java "Hack".'),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Zahl in String umwandeln"',title:'"Zahl',in:!0,String:!0,'umwandeln"':!0},'String zahl = "" + 21;\n// zahl ist nun "21"\n'))),(0,i.kt)("h2",{id:"rechnen-und-operatoren"},"Rechnen und Operatoren"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///slides/operatoren"},"\ud83d\udcbb Open in Browser")," |\n",(0,i.kt)("a",{parentName:"p",href:"pathname:///slides/operatoren.pdf"},"\ud83d\udcbe download PDF")),(0,i.kt)("iframe",{src:"/bbzbl-modul-319/slides/operatoren",width:"100%",height:"400px"}),(0,i.kt)("h3",{id:"arithmetische------"},"Arithmetische ",(0,i.kt)("inlineCode",{parentName:"h3"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"/"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"%")),(0,i.kt)("p",null,"Arithmetische Operatoren kennt Ihr bereits von der Mathematik. Damit lassen sich\ndie g\xe4ngigen Mathematischen Operationen durchf\xfchren. Neu ist einzig der Rest\nOperator ",(0,i.kt)("inlineCode",{parentName:"p"},"%"),". Dieser dividiert eine Zahl und gibt den Rest zur\xfcck."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="+ - / * % Arithmetische Operatoren"',title:'"+',"-":!0,"/":!0,"*":!0,"%":!0,Arithmetische:!0,'Operatoren"':!0},"int result;\nint number = 9;\nint anotherNumber = 3;\n\nresult = number + anotherNumber; // Addition\nresult = number - anotherNumber; // Subtraktion\nresult = number / anotherNumber; // Division\nresult = number * anotherNumber; // Multiplikation\nresult = number % anotherNumber; // Rest der Division\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Gerade/Ungerade berechnen mit ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"%")),(0,i.kt)("p",{parentName:"admonition"},"Der Rest-Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," gibt bei einer division immer den Rest zur\xfcck. Wenn man\nnun eine Division durch 2 durchf\xfchrt l\xe4sst sich herausfinden ob eine Zahl gerade\noder ungerade ist."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"9 % 2  // ergibt 4 * 2 Rest 1 also ungerade\n10 % 2 // ergibt 5 * 2 Rest 0 also gerade\n\npublic boolean even(int number) {\n    return number % 2 == 0;\n}\n"))),(0,i.kt)("h3",{id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----"},"Verk\xfcrzte arithmetische Operation mit sich selbst ",(0,i.kt)("inlineCode",{parentName:"h3"},"+="),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"-="),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"*="),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"/=")),(0,i.kt)("p",null,"Oft m\xf6chte man den Wert einer Variablen direkt ver\xe4ndern. Das Resultat also\nnicht in eine neue Variable, sonder in sich selber speichern. Gegeben ist z.B.\ndie Variable ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," vom Typ ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," mit dem Initialwert ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int number = 3;\n")),(0,i.kt)("p",null,"M\xf6chte man dieser Variable ",(0,i.kt)("inlineCode",{parentName:"p"},"4")," hinzuaddieren geht das folgendermassen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"number = number + 4; // Addition und Zuweisung zu sich selbst\n")),(0,i.kt)("p",null,"Da dies sehr oft vorkommt ist in allen g\xe4ngigen Programmiersprachen daf\xfcr ein\nkombinierten Operator vorgesehen. Es wird dem Zuweisungsoperator den\narithmetische Operator ",(0,i.kt)("strong",{parentName:"p"},"vorangestellt"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"number += 4; // Verk\xfcrzte Addition und Zuweisung zu sich selbst\n")),(0,i.kt)("p",null,"Aus ",(0,i.kt)("inlineCode",{parentName:"p"},"number = number + 4;")," wird somit ",(0,i.kt)("inlineCode",{parentName:"p"},"number += 4;")," und erspart uns die\nDopplung der Variable. Dies geht nat\xfcrlich auch f\xfcr alle anderen arithmetischen\nOperatoren."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"number -= 7; // Subtraktion und Zuweisung zu sich selbst\nnumber *= 9; // Multiplikation und Zuweisung zu sich selbst\nnumber /= 2; // Division und Zuweisung zu sich selbst\n")),(0,i.kt)("h3",{id:"un\xe4re-einstellige-operatoren----"},"Un\xe4re (einstellige) Operatoren ",(0,i.kt)("inlineCode",{parentName:"h3"},"++"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"--")),(0,i.kt)("p",null,"Noch h\xe4ufiger als die verk\xfcrzte arithmetische Operation mit sich selbst wird im\nProgrammieren schrittweise hoch und runtergez\xe4hlt ",(0,i.kt)("strong",{parentName:"p"},"was auch Iteration genannt\nwird"),"."),(0,i.kt)("p",null,"M\xf6chte man also von 0 - 3 hochz\xe4hlen geht dies so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber += 1;\nnumber += 1;\nnumber += 1;\n")),(0,i.kt)("p",null,"Der Un\xe4re Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"++")," z\xe4hlt der links vorangestellten Variable eines\nnummerischen Typ eine 1 hinzu. Der obere Code ist somit identisch zu diesem:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber++;\nnumber++;\nnumber++;\n")),(0,i.kt)("admonition",{title:"Un\xe4r => einstellig",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Un\xe4r bedeutet einstellig, es braucht daher ",(0,i.kt)("strong",{parentName:"p"},"nur der linke")," und nicht auch\neinen rechten Teil beim Operator.")),(0,i.kt)("admonition",{title:"Funfact",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"C++ erweitert die Programmiersprache C. Um diese Verwandtschaft ein bisschen\nNERDisch Auszudr\xfccken wurde das Wortspiel C++ gew\xe4hlt. C++ ist eine weitere\nIteration von C.")),(0,i.kt)("h3",{id:"vergleichsoperatoren---"},"Vergleichsoperatoren ",(0,i.kt)("inlineCode",{parentName:"h3"},"=="),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"!="),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"!")),(0,i.kt)("p",null,"Vergleichsoperatoren ergeben immer einen ",(0,i.kt)("strong",{parentName:"p"},"boolean (true/false)"),". Sie werden in\nKontrollstrukturen als Bedingungen verwendet."),(0,i.kt)("div",{className:"grid three"},(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="== Gleichheit"',title:'"','Gleichheit"':!0},"true  == true; // true\n1     == 1     // true\n\nfalse == true; // false\n1     == 2     // false\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="!= Ungleichheit"',title:'"!','Ungleichheit"':!0},"false != true; // true\n1     != 2     // true\n\ntrue  != true; // false\n1     != 1     // false\n"))),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="! Negation"',title:'"!','Negation"':!0},"!false // true\n!(1 == 2) // true\n\n!true // false\n!(1 == 1) // false\n")))),(0,i.kt)("p",null,"Mit den numerischen Datentypen kann mit den bekannten Operatoren gerechnet\nwerden. Also jene die aus der Mathematik bekannt sind: ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,i.kt)("p",null,"Dann gibt es noch einige Spezialf\xe4lle in Java, die Sie fr\xfcher oder sp\xe4ter kennen\nlernen werden. Darum werden diese hier vorgestellt:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"++")," erh\xf6ht die Zahl um 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--")," reduziert die Zahl um 1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Spezial-Operatoren in Java"',title:'"Spezial-Operatoren',in:!0,'Java"':!0},"int a = 1;\nint b = 1;\na++; // a = a + 1;\nSystem.out.println(a); // 1 + 1 = 2\n\nb--; // b = b - 1\nSystem.out.println(b); // 1 - 1 = 0\n")),(0,i.kt)("h2",{id:"-aufgaben"},"\ud83d\udcdd Aufgaben"),(0,i.kt)(m,{className:"pdf-exclude",mdxType:"DocCardList"}),(0,i.kt)("h2",{id:"-erkl\xe4rvideos-von-studyflix"},"\ud83d\udcfa Erkl\xe4rvideos von Studyflix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://studyflix.de/informatik/primitive-datentypen-215"},"Java Datentypen einfach Erkl\xe4hrt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://studyflix.de/informatik/variablen-216"},"Java Variablen deklarieren und initialisieren")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://studyflix.de/informatik/ausdrucke-und-arithmetische-operatoren-217"},"Ausdr\xfccke und Operatoren in Java")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://studyflix.de/informatik/boolesche-ausdrucke-221"},"Boolsche ausdr\xfccke in Java"))))}h.isMDXComponent=!0}}]);