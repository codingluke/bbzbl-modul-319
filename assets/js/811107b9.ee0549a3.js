"use strict";(self.webpackChunkdocosaurus_rex=self.webpackChunkdocosaurus_rex||[]).push([[2260],{7983:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>o,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var t=i(5893),r=i(1151);const a={sidebar_position:6,keywords:["pdf"]},s="Geltungsbereich von lokalen Variablen",l={id:"woche04/4a-methoden-fehleranalyse/geltungsbereich-variablen",title:"Geltungsbereich von lokalen Variablen",description:"Wenn eine Variable innerhalb einer Methode initialisiert wird, spricht man",source:"@site/docs/woche04/4a-methoden-fehleranalyse/geltungsbereich-variablen.md",sourceDirName:"woche04/4a-methoden-fehleranalyse",slug:"/woche04/4a-methoden-fehleranalyse/geltungsbereich-variablen",permalink:"/bbzbl-modul-319/docs/woche04/4a-methoden-fehleranalyse/geltungsbereich-variablen",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-319/tree/main/docs/woche04/4a-methoden-fehleranalyse/geltungsbereich-variablen.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,keywords:["pdf"]},sidebar:"tutorialSidebar",previous:{title:"Methoden Aufgaben",permalink:"/bbzbl-modul-319/docs/woche04/4a-methoden-fehleranalyse/aufgaben"},next:{title:"\ud83e\uddd0 Fehleranalyse",permalink:"/bbzbl-modul-319/docs/woche04/fehleranalyse"}},h={},u=[{value:"Explizites Beispiel",id:"explizites-beispiel",level:4}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"geltungsbereich-von-lokalen-variablen",children:"Geltungsbereich von lokalen Variablen"}),"\n",(0,t.jsxs)(n.p,{children:["Wenn eine Variable ",(0,t.jsx)(n.strong,{children:"innerhalb einer Methode initialisiert"})," wird, spricht man\nvon lokalen Variablen. Lokal, da sie nur innerhalb dieser Methode ab der\nInitialisierung verwendet werden kann (g\xfcltig ist)."]}),"\n",(0,t.jsxs)(n.p,{children:["Zudem k\xf6nnen lokale Variablen ",(0,t.jsx)(n.strong,{children:"nur im selben Code-Block"})," (geschweifte Klammern\n",(0,t.jsx)(n.code,{children:"{ }"}),") indem Sie deklariert wurden, verwendet werden."]}),"\n",(0,t.jsx)(n.h4,{id:"explizites-beispiel",children:"Explizites Beispiel"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Gr\xfcn wird dargestellt wenn eine Variable sichtbar, also deklariert wird"}),"\n",(0,t.jsx)(n.li,{children:"Gelb zeigt an wenn die Sichtbarkeit einer Variable endet"}),"\n",(0,t.jsx)(n.li,{children:"Rot sind Fehlerbeispiele, an diesen Stellen wird versucht auf eine Variable\nzuzugreifen, welche an dem Punkt nicht sichtbar ist."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="Geltungsbereich von lokalen Variablen" showLineNumbers',children:'import mytools.StdInput;\n\npublic class Beispiel {\n\n    public static void main(String[] args) {\n        // highlight-red-next-line\n        // ERROR: userInputMain wird erst auf Zeile 9 definiert\n        // highlight-red-next-line\n        System.out.println("Hier kann " + userInputMain + " noch nicht verwendet werden!");\n\n        // highlight-green-next-line\n        int userInputMain = readNumberInRange(40, 60); // ab hier ist userInputMain sichtbar\n\n        // userInputMain ist sichtbar\n        System.out.println("Sie haben " + userInputMain + " eingegeben!");\n\n        // highlight-red-next-line\n        // ERROR: userInputRange ist hier nicht sichtbar!\n        // highlight-red-next-line\n        System.out.println("Hier kann " + userInputRange + " nicht verwendet werden!");\n        // highlight-yellow-next-line\n        // hier endet die Sichtbarkeit von userInputMain\n    }\n\n    private static int readNumberInRange(int min, int max)\n        // highlight-green-next-line\n    {   // ab hier ist min und max sichtbar\n        // highlight-green-next-line\n        int userInputRange; // ab hier ist userInputRange sichtbar\n        do {\n            // highlight-green-next-line\n            int userInputRangeNested; // ab hier ist userInputRangeNested sichtbar\n            System.out.print("Geben Sie eine Zahl zwischen " + min + " und " + max + " ein: ");\n            userInputRangeNested = StdInput.readInt(); // userInputRangeNested ist sichtbar\n            userInputRange = userInputRangeNested; // userInputRange ist sichtbar\n            // highlight-yellow-next-line\n            // hier endet die Sichtbarkeit von userInputRangeNested\n        } while (min > userInputRange || userInputRange > max);\n        // highlight-red-next-line\n        return userInputRangeNested; // ERROR: userInputRangeNested ist nicht sichtbar!\n        return userInputRange; // userInputRange ist hier sichtbar\n        // highlight-yellow-next-line\n        // hier endet die Sichtbarkeit von userInputRange, min und max\n    }\n\n}\n'})}),"\n",(0,t.jsxs)(n.admonition,{title:"Geschweifte Klammern Z\xe4hlen!",type:"tip",children:[(0,t.jsx)(n.p,{children:"Beim Programmieren muss man immer ein gutes Auge auf die geschweiften Klammern\nhalten. Diese sind sehr oft das Problem wenn Eclipse errors anzeigt."}),(0,t.jsx)(n.p,{children:":superhero: Es ist guter Stil, wenn die Verschachtelung nicht mehr als 3\nKlammern \xfcbersteigt."})]})]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>s});var t=i(7294);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);