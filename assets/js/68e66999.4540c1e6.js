"use strict";(self.webpackChunkdocosaurus_rex=self.webpackChunkdocosaurus_rex||[]).push([[5509],{238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var i=t(5893),r=t(1151);const l={sidebar_position:3,keywords:["pdf"]},s="Mathematik Olympiade",d={id:"woche08/8a-repetition/mathe-olympiade",title:"Mathematik Olympiade",description:'Es soll eine "Mathematik Olympiade" implementiert werden.',source:"@site/docs/woche08/8a-repetition/mathe-olympiade.md",sourceDirName:"woche08/8a-repetition",slug:"/woche08/8a-repetition/mathe-olympiade",permalink:"/bbzbl-modul-319/docs/woche08/8a-repetition/mathe-olympiade",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-319/tree/main/docs/woche08/8a-repetition/mathe-olympiade.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,keywords:["pdf"]},sidebar:"tutorialSidebar",previous:{title:"ShoppingList",permalink:"/bbzbl-modul-319/docs/woche08/8a-repetition/shoppinglist"},next:{title:"Memory",permalink:"/bbzbl-modul-319/docs/woche08/8a-repetition/memory"}},a={},o=[{value:"Spielregeln",id:"spielregeln",level:2},{value:"\ud83e\uddf0 Implementationshilfe",id:"toolbox-implementationshilfe",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"mathematik-olympiade",children:"Mathematik Olympiade"}),"\n",(0,i.jsx)(n.p,{children:'Es soll eine "Mathematik Olympiade" implementiert werden.'}),"\n",(0,i.jsx)(n.h2,{id:"spielregeln",children:"Spielregeln"}),"\n",(0,i.jsx)(n.p,{children:"Dazu gibt der Benutzer als erstes an, wie viele Aufgaben er l\xf6sen m\xf6chte und in\nwelchem Wertebereich sich die einzelnen Zahlen einer Rechnung befinden sollen."}),"\n",(0,i.jsx)(n.p,{children:"Danach werden die Aufgaben zuf\xe4llig generiert. Es sollen die beiden\nGrundrechenarten Addition und Division m\xf6glich sein. Es sollen nur Ganzzahlen\nverwendet werden."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Addition:"})," die beiden Summanden werden zuf\xe4llig im angegebenen Wertebereich\ngeneriert."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Division:"})," Dividend und Divisor werden zuf\xe4llig generiert. Achten Sie darauf,\ndass der Divisor nicht 0 sein darf. Geht die Division nicht auf (also g\xe4be es\neinen Rest), sollen erneut zwei Zahlen generiert werden. Dies so lange, bis die\nRechnung aufgeht."]}),"\n",(0,i.jsx)(n.p,{children:"Die generierte Rechnung wird dem Benutzer auf die Konsole ausgegeben, worauf er\nseine L\xf6sung eingeben muss. Dies wird so lange wiederholt, bis die Anzahl zu\nl\xf6senden Aufgaben (Eingabe des Benutzers zu Beginn) erreicht wurden."}),"\n",(0,i.jsx)(n.p,{children:"Am Schluss erfolgt eine Ausgabe, wie viele Fehler der Benutzer gemacht hat."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Beispielausgabe"',children:"Wie viele Aufgaben willst du l\xf6sen?\n5\n\nGib den Wertebereich an!\n10\n\n1.Aufgabe\nAddition\n2+6\n8\nRichtig\n\n2.Aufgabe\nAddition\n8+8\n16\nRichtig\n\n3.Aufgabe\nAddition\n3+1\n4\nRichtig\n\n4.Aufgabe\nDivision\n2/2\n0\nFalsch\n\n5.Aufgabe\nAddition\n0+3\n2\nFalsch\n\nFehleranzahl: 2\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"toolbox-implementationshilfe",children:["\ud83e\uddf0"," Implementationshilfe"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In der main-Methode fragen Sie den Benutzer als erstes, wie viele Aufgaben er\nl\xf6sen m\xf6chte und in welchem Wertebereich sich die Zahlen befinden sollen"}),"\n",(0,i.jsx)(n.li,{children:"In Abh\xe4ngigkeit der Anzahl Aufgaben sollen Rechnungen generiert werden"}),"\n",(0,i.jsx)(n.li,{children:"Als erstes soll zuf\xe4llig bestimmt werden, ob eine Addition oder eine Division\ngeneriert werden soll"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bei einer Addition"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["lagern Sie das Generieren der Addition in eine ",(0,i.jsx)(n.strong,{children:"eigene Methode"})," daf\xfcr aus.\nAls Parameter erh\xe4lt sie den Wertebereich, als R\xfcckgabewert liefert sie, ob\ndie Rechnung korrekt gel\xf6st wurde oder nicht"]}),"\n",(0,i.jsx)(n.li,{children:"Es werden zwei Zufallszahlen im Wertebereich generiert"}),"\n",(0,i.jsx)(n.li,{children:"Die korrekte L\xf6sung wird im Programm berechnet"}),"\n",(0,i.jsx)(n.li,{children:"Dem Benutzer wird die Rechnung pr\xe4sentiert"}),"\n",(0,i.jsx)(n.li,{children:"Der Benutzer muss die L\xf6sung eingeben k\xf6nnen"}),"\n",(0,i.jsx)(n.li,{children:"Stimmen Eingabe und L\xf6sung \xfcberein liefert die Methode true, ansonsten false\nzur\xfcck"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bei einer Division"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["lagern Sie das Generieren der Division in eine ",(0,i.jsx)(n.strong,{children:"eigene Methode"})," aus. Als\nParameter erh\xe4lt sie den Wertebereich, als R\xfcckgabewert liefert sie, ob die\nRechnung korrekt gel\xf6st wurde oder nicht"]}),"\n",(0,i.jsx)(n.li,{children:"Es werden zwei Zufallszahlen generiert. Achtung: der Divisor darf nicht 0\nwerden"}),"\n",(0,i.jsx)(n.li,{children:"Geht die Rechnung nicht auf, werden erneut zwei Zahlen generiert. Dies wird\nso lange wiederholt, bis die Rechnung aufgeht"}),"\n",(0,i.jsx)(n.li,{children:"Die korrekte L\xf6sung wird im Programm berechnet"}),"\n",(0,i.jsx)(n.li,{children:"Dem Benutzer wird die Rechnung pr\xe4sentiert"}),"\n",(0,i.jsx)(n.li,{children:"Der Benutzer muss die L\xf6sung eingeben k\xf6nnen"}),"\n",(0,i.jsx)(n.li,{children:"Stimmen Eingabe und L\xf6sung \xfcberein liefert die Methode true, ansonsten false\nzur\xfcck"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Nachdem die Methode f\xfcr die jeweilige Rechnung beendet wurde, liefert Sie\nzur\xfcck, ob die Rechnung korrekt gel\xf6st wurde oder nicht. Dieser R\xfcckgabewert\nsoll abgefangen werden. War die Rechnung falsch, z\xe4hlen Sie einen Counter f\xfcr\ndie Anzahl falschen Rechnungen hoch."}),"\n",(0,i.jsx)(n.li,{children:"Nachdem alle Aufgaben gel\xf6st wurden, geben Sie die Anzahl Fehler auf die\nKonsole aus."}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Musterl\xf6sung:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="MathOlympiad.java"',children:'import mytools.StdInput;\n\npublic class MathOlympiad {\n\n\tpublic static void main(String[] args) {\n\n\t\tSystem.out.println("Wie viele Aufgaben willst du l\xf6sen?");\n\t\tint aufgabenAnzahl = StdInput.readInt();\n\n\t\tSystem.out.println("Gib den Wertebereich an!");\n\t\tint werteBereich =  StdInput.readInt();\n\n\t\tint operation = 0;//lokale Variable speichert die Zufallszahl\n\t\tint fehlerAnzahl = 0;\n\n\t\tfor (int i = 1; i <= aufgabenAnzahl; i++) {\n\t\t\tboolean korrekt = false;\n\t\t\toperation = (int) (Math.random() * 2);//Zufallszahl wird jedes Mal neu ermittelt\n\t\t\tSystem.out.println(i + ".Aufgabe");//Konsolenausgabe zur Aufgabenanzahl 1., 2., 3. usw.\n\t\t\tswitch (operation) {\n\t\t\tcase 0:\n\t\t\t\tSystem.out.println("Addition");\n\t\t\t\tkorrekt = addiere(werteBereich);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tSystem.out.println("Division");\n\t\t\t\tkorrekt = dividiere(werteBereich);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!korrekt) {\n\t\t\t\tfehlerAnzahl++;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println("Fehleranzahl: " + fehlerAnzahl);\n\t}\n\n\tpublic static boolean addiere(int werteBereich) {\n\t\tint sumEins = (int) (Math.random() * werteBereich); //Zufallszahl f\xfcr Summand Eins\n\t\tint sumZwei = (int) (Math.random() * werteBereich); //Zufallszahl f\xfcr Summand Zwei\n\t\tint summe = sumEins + sumZwei; //Summe = Summand +  Summand\n\n\t\tSystem.out.println(sumEins + "+" + sumZwei);//Rechnung ausgeben\n\t\tint eingabe = StdInput.readInt();\n\t\tif (summe != eingabe) {\n\t\t\tSystem.out.println("Falsch");\n\t\t\treturn false;\n\t\t} else {\n\t\t\tSystem.out.println("Richtig");\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic static boolean dividiere(int werteBereich) {\n\t\tint dividend = (int) (Math.random() * werteBereich);\n\t\tint divisor = (int) (Math.random() * werteBereich) + 1;//Null als Zufallszahl wird ausgeschlossen\n\t\tint quotient = dividend / divisor;\n\n\t\twhile (dividend % divisor != 0) {\n\t\t\tdividend = (int) (Math.random() * werteBereich);\n\t\t\tdivisor = (int) (Math.random() * werteBereich) + 1;//Zufallszahl ist gr\xf6\xdfer Null\n\t\t\tquotient = dividend / divisor;\n\t\t}\n\t\tSystem.out.println(dividend + "/" + divisor);\n\t\tint eingabe = StdInput.readInt();\n\t\tif (eingabe != quotient) {\n\t\t\tSystem.out.println("Falsch");\n\t\t\treturn false;\n\t\t} else {\n\t\t\tSystem.out.println("Richtig");\n\t\t\treturn true;\n\t\t}\n\t}\n}\n'})})]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(7294);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);